@model ThisNetWorks.OrchardCore.Seo.TwitterMeta.ViewModels.TwitterMetaPartViewModel
@using ThisNetWorks.OrchardCore.Seo.Meta.Models
@using OrchardCore.ContentManagement
@using OrchardCore.Mvc.Core.Utilities
@inject OrchardCore.ContentManagement.IContentManager ContentManager
@{
    @* do twitter tags first, then og tags from same dataset (MVP) - just so they line up together *@

    <meta asp-name="twitter:card" content="summary" />

    if (!String.IsNullOrEmpty(Model.TwitterMetaSettings.TwitterSite))
    {
        <meta asp-name="twitter:site" content="@Model.TwitterMetaSettings.TwitterSite" />
    }

    if (!String.IsNullOrEmpty(Model.TwitterMetaSettings.TwitterCreator))
    {
        <meta asp-name="twitter:creator" content="@Model.TwitterMetaSettings.TwitterCreator" />
    }

    if (!String.IsNullOrEmpty(Model.Title))
    {
        <meta asp-name="twitter:title" content="@Model.Title" />
        @*<meta asp-name="title2" content="@Model.Title" />
            <meta asp-property="og:title"  content="@Model.Title" />*@
    }
    else
    {
        <meta asp-name="twitter:title" content="@Model.TwitterMetaPart.ContentItem.DisplayText" />
        var contentItem = Model.TwitterMetaPart.ContentItem.DisplayText;
        var title = contentItem;
    }
    if (!String.IsNullOrEmpty(Model.Description))
    {
        <meta asp-name="twitter:description" content="@Model.Description" />
    }
    else
    {
        SeoMetaPart seoMetaPart = Model.TwitterMetaPart.ContentItem.As<SeoMetaPart>();
        if (seoMetaPart != null && !String.IsNullOrEmpty(seoMetaPart.MetaDescription))
        {
            <meta asp-name="twitter:description" content="@seoMetaPart.MetaDescription" />
        }
        else
        {

            <meta asp-name="twitter:description" content="@Model.TwitterMetaPart.ContentItem.DisplayText" />
        }
    }


    var contentItemMetadata = await ContentManager.PopulateAspectAsync<ContentItemMetadata>(Model.TwitterMetaPart.ContentItem);

    var relativeUrl = Url.RouteUrl(contentItemMetadata.DisplayRouteValues);
    var absoluteUrl = Url.ToAbsoluteUrl(relativeUrl);
    <meta asp-name="twitter:url" content="@absoluteUrl" />



    if (Model.TwitterMetaPart.Content.TwitterImage.Paths.HasValues)
    {
        var twitterImage = (string)Model.TwitterMetaPart.Content.TwitterImage.Paths[0];

        if (twitterImage.Substring(0, 1) != "/")
        {
            twitterImage = "/" + twitterImage;
        }
        var twitterImageAbs = Url.ToAbsoluteUrl(twitterImage);
        <meta asp-name="twitter:image" content="@twitterImageAbs" />
    }
    else if (!String.IsNullOrEmpty(Model.TwitterMetaSettings.DefaultImageUrl))
    {
        var twitterImage = Model.TwitterMetaSettings.DefaultImageUrl;
        if (twitterImage.Substring(0, 1) != "/")
        {
            twitterImage = "/" + twitterImage;
        }
        var twitterImageAbs = Url.ToAbsoluteUrl(twitterImage);
        <meta asp-name="twitter:image" content="@twitterImageAbs" />
    }
    if (!String.IsNullOrEmpty(Model.ImageAlt))
    {
        <meta asp-name="twitter:image:alt" content="@Model.ImageAlt" />
    }
    else if (!String.IsNullOrEmpty(Model.TwitterMetaSettings.DefaultImageAlt))
    {
        <meta asp-name="twitter:image:alt" content="@Model.TwitterMetaSettings.DefaultImageAlt" />
    }

    @*cool despite this getting parse to type="application/ld&#x2B;json" google schema markup tester will parse it correctly.
        Definitely an easy way to get some schema in, build it with the google tool, adn cut and paste it into field*@
    if (!String.IsNullOrEmpty(Model.GoogleSchema))
    {
        <script type="application/ld+json" at="Head">
            @Html.Raw(@Model.GoogleSchema)
        </script>
    }
}
